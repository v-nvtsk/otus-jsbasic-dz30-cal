(()=>{"use strict";var t={309:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(559),s=n.n(a),i=n(476),r=n.n(i)()(s());r.push([t.id,".filter__fieldset {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.filter__group {\n  display: flex;\n  flex-direction: column;\n  place-content: end;\n}\n\n.filter__group-btn {\n  flex-grow: 2;\n  display: grid;\n  grid-template-columns: repeat(2, 60px);\n  gap: 10px;\n  align-items: end;\n}\n","",{version:3,sources:["webpack://./components/filter-controls/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,SAAS;EACT,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,sCAAsC;EACtC,SAAS;EACT,gBAAgB;AAClB",sourcesContent:[".filter__fieldset {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.filter__group {\n  display: flex;\n  flex-direction: column;\n  place-content: end;\n}\n\n.filter__group-btn {\n  flex-grow: 2;\n  display: grid;\n  grid-template-columns: repeat(2, 60px);\n  gap: 10px;\n  align-items: end;\n}\n"],sourceRoot:""}]);const o=r},172:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(559),s=n.n(a),i=n(476),r=n.n(i)()(s());r.push([t.id,".task-add__fieldset {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.task-add__group {\n  display: flex;\n  flex-direction: column;\n  justify-content: end;\n}\n\n.task-add__group:has(.task-add__input-text),\n.task-add__group:has(.task-add__input-tags) {\n  flex-grow: 2;\n}\n\n.task-add__input-text,\n.task-add__input-tags {\n  width: 100%;\n}\n","",{version:3,sources:["webpack://./components/task-add/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,eAAe;EACf,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;;EAEE,YAAY;AACd;;AAEA;;EAEE,WAAW;AACb",sourcesContent:[".task-add__fieldset {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.task-add__group {\n  display: flex;\n  flex-direction: column;\n  justify-content: end;\n}\n\n.task-add__group:has(.task-add__input-text),\n.task-add__group:has(.task-add__input-tags) {\n  flex-grow: 2;\n}\n\n.task-add__input-text,\n.task-add__input-tags {\n  width: 100%;\n}\n"],sourceRoot:""}]);const o=r},647:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(559),s=n.n(a),i=n(476),r=n.n(i)()(s());r.push([t.id,'.list__item {\n  display: grid;\n  grid-template-columns: 80px 1fr 50px;\n  grid-template-areas:\n    "checkbox title btn"\n    "checkbox dates btn"\n    "checkbox tags tags";\n  padding: 10px;\n  border-bottom: 1px solid #ccc;\n}\n\n.list__item:last-of-type {\n  border-bottom: none;\n}\n\n.list__item.edit-mode .item__title {\n  display: none;\n}\n\n.list__item:has(.item__input-checkbox:checked) .item__title {\n  text-decoration: line-through;\n}\n\n.list__item:hover {\n  background-color: #f5f5f5;\n}\n\n.item__checkbox {\n  grid-area: checkbox;\n  place-self: center;\n}\n\n.item__input-checkbox {\n  transform: scale(2);\n}\n\n.input__wrapper {\n  grid-area: title;\n  font-size: 24px;\n  padding: 5px;\n}\n\n.item__dates {\n  margin-top: 5px;\n  grid-area: dates;\n  font-size: 10px;\n  display: flex;\n  gap: 20px;\n}\n\n.item__btn {\n  grid-area: btn;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  /* align-items: center; */\n  /* align-content: center; */\n}\n\n.item__task-tags {\n  margin-top: 5px;\n  grid-area: tags;\n  display: flex;\n  gap: 20px;\n}\n\n.item__task-tags > *::before {\n  content: "🏷️";\n}\n\n.list__item .item__input-text {\n  display: none;\n}\n\n.list__item.edit-mode .item__input-text {\n  display: inline-block;\n  width: 90%;\n}\n\n@media screen and (max-width: 768px) {\n  .list__item {\n    grid-template-columns: auto 1fr auto;\n    padding: 5px;\n  }\n\n  .item__input-checkbox {\n    transform: scale(1);\n  }\n\n  .input__wrapper {\n    font-size: 16px;\n  }\n\n  .item__dates {\n    flex-direction: column;\n    gap: 2px;\n  }\n\n  .item__task-tags,\n  .item__task-tags > *::before {\n    font-size: 10px;\n  }\n\n  .item__btn .btn {\n    font-size: 10px;\n    padding: 2px;\n    bottom: 1px;\n  }\n}\n',"",{version:3,sources:["webpack://./components/task-item/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,oCAAoC;EACpC;;;wBAGsB;EACtB,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,eAAe;EACf,aAAa;EACb,SAAS;AACX;;AAEA;EACE,cAAc;EACd,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,yBAAyB;EACzB,2BAA2B;AAC7B;;AAEA;EACE,eAAe;EACf,eAAe;EACf,aAAa;EACb,SAAS;AACX;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,UAAU;AACZ;;AAEA;EACE;IACE,oCAAoC;IACpC,YAAY;EACd;;EAEA;IACE,mBAAmB;EACrB;;EAEA;IACE,eAAe;EACjB;;EAEA;IACE,sBAAsB;IACtB,QAAQ;EACV;;EAEA;;IAEE,eAAe;EACjB;;EAEA;IACE,eAAe;IACf,YAAY;IACZ,WAAW;EACb;AACF",sourcesContent:['.list__item {\n  display: grid;\n  grid-template-columns: 80px 1fr 50px;\n  grid-template-areas:\n    "checkbox title btn"\n    "checkbox dates btn"\n    "checkbox tags tags";\n  padding: 10px;\n  border-bottom: 1px solid #ccc;\n}\n\n.list__item:last-of-type {\n  border-bottom: none;\n}\n\n.list__item.edit-mode .item__title {\n  display: none;\n}\n\n.list__item:has(.item__input-checkbox:checked) .item__title {\n  text-decoration: line-through;\n}\n\n.list__item:hover {\n  background-color: #f5f5f5;\n}\n\n.item__checkbox {\n  grid-area: checkbox;\n  place-self: center;\n}\n\n.item__input-checkbox {\n  transform: scale(2);\n}\n\n.input__wrapper {\n  grid-area: title;\n  font-size: 24px;\n  padding: 5px;\n}\n\n.item__dates {\n  margin-top: 5px;\n  grid-area: dates;\n  font-size: 10px;\n  display: flex;\n  gap: 20px;\n}\n\n.item__btn {\n  grid-area: btn;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  /* align-items: center; */\n  /* align-content: center; */\n}\n\n.item__task-tags {\n  margin-top: 5px;\n  grid-area: tags;\n  display: flex;\n  gap: 20px;\n}\n\n.item__task-tags > *::before {\n  content: "🏷️";\n}\n\n.list__item .item__input-text {\n  display: none;\n}\n\n.list__item.edit-mode .item__input-text {\n  display: inline-block;\n  width: 90%;\n}\n\n@media screen and (max-width: 768px) {\n  .list__item {\n    grid-template-columns: auto 1fr auto;\n    padding: 5px;\n  }\n\n  .item__input-checkbox {\n    transform: scale(1);\n  }\n\n  .input__wrapper {\n    font-size: 16px;\n  }\n\n  .item__dates {\n    flex-direction: column;\n    gap: 2px;\n  }\n\n  .item__task-tags,\n  .item__task-tags > *::before {\n    font-size: 10px;\n  }\n\n  .item__btn .btn {\n    font-size: 10px;\n    padding: 2px;\n    bottom: 1px;\n  }\n}\n'],sourceRoot:""}]);const o=r},178:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(559),s=n.n(a),i=n(476),r=n.n(i)()(s());r.push([t.id,"/* reset styling */\n\n.task-list {\n  max-width: 100%;\n  margin: 0 auto;\n  padding: 0px;\n  list-style-type: none;\n}\n\ninput,\nbutton {\n  outline: none;\n}\n\n.empty-list {\n  margin: 0 auto;\n  font-size: 30px;\n  text-align: center;\n}\n\n.task-list:has(.list__item) .empty-list {\n  display: none;\n}\n\n@media screen and (max-width: 768px) {\n  .empty-list {\n    font-size: 16px;\n  }\n}\n","",{version:3,sources:["webpack://./components/task-list/style.css"],names:[],mappings:"AAAA,kBAAkB;;AAElB;EACE,eAAe;EACf,cAAc;EACd,YAAY;EACZ,qBAAqB;AACvB;;AAEA;;EAEE,aAAa;AACf;;AAEA;EACE,cAAc;EACd,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE;IACE,eAAe;EACjB;AACF",sourcesContent:["/* reset styling */\n\n.task-list {\n  max-width: 100%;\n  margin: 0 auto;\n  padding: 0px;\n  list-style-type: none;\n}\n\ninput,\nbutton {\n  outline: none;\n}\n\n.empty-list {\n  margin: 0 auto;\n  font-size: 30px;\n  text-align: center;\n}\n\n.task-list:has(.list__item) .empty-list {\n  display: none;\n}\n\n@media screen and (max-width: 768px) {\n  .empty-list {\n    font-size: 16px;\n  }\n}\n"],sourceRoot:""}]);const o=r},790:(t,e,n)=>{n.d(e,{Z:()=>o});var a=n(559),s=n.n(a),i=n(476),r=n.n(i)()(s());r.push([t.id,'* {\n  box-sizing: border-box;\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#root {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 20px;\n}\n',"",{version:3,sources:["webpack://./style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,4DAA4D;AAC9D;;AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,aAAa;AACf",sourcesContent:['* {\n  box-sizing: border-box;\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n}\n\n#root {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 20px;\n}\n'],sourceRoot:""}]);const o=r},476:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",a=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),a&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),a&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,a,s,i){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(a)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(r[l]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);a&&r[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),s&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=s):d[4]="".concat(s)),e.push(d))}},e}},559:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),i="/*# ".concat(s," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},892:t=>{var e=[];function n(t){for(var n=-1,a=0;a<e.length;a++)if(e[a].identifier===t){n=a;break}return n}function a(t,a){for(var i={},r=[],o=0;o<t.length;o++){var l=t[o],c=a.base?l[0]+a.base:l[0],d=i[c]||0,p="".concat(c," ").concat(d);i[c]=d+1;var u=n(p),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(A);else{var m=s(A,a);a.byIndex=o,e.splice(o,0,{identifier:p,updater:m,references:1})}r.push(p)}return r}function s(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,s){var i=a(t=t||[],s=s||{});return function(t){t=t||[];for(var r=0;r<i.length;r++){var o=n(i[r]);e[o].references--}for(var l=a(t,s),c=0;c<i.length;c++){var d=n(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=l}}},311:t=>{var e={};t.exports=function(t,n){var a=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},60:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},192:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},760:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var s=void 0!==n.layer;s&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,s&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(a,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},865:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(a){var s=e[a];if(void 0!==s)return s.exports;var i=e[a]={id:a,exports:{}};return t[a](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var a in e)n.o(e,a)&&!n.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t="calendar",e="test@test.test";function a(t,e,n){var a;return(e="symbol"==typeof(a=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?a:String(a))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const s="nv-otus-default-rtdb";function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e,n){var a;return(e="symbol"==typeof(a=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?a:String(a))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}class l{constructor(n){o(this,"namespace",`${t}@${e}#`),this.namespace=void 0!==n?`${t}@${n}#`:this.namespace}async create(t){const e=r({},t);return e.id=(new Date).valueOf().toString(),new Promise((t=>{localStorage.setItem(this.namespace+e.id,JSON.stringify(e)),t(e.id)}))}async read(t){const e=Array.from({length:localStorage.length},((t,e)=>{const n=localStorage.key(e);return{[n]:localStorage.getItem(n)}})).reduce(((t,e)=>r(r({},t),e)),{}),n=Object.entries(e).filter((([t])=>t.startsWith(this.namespace))).map((([,t])=>{let e=null;return e=JSON.parse(t),e})).filter((e=>{let n=!0;void 0===t.taskText||e.taskText.includes(t.taskText)||(n=!1),void 0!==t.status&&t.status!==e.status&&(n=!1);const a=new Date(e.dueDateUTC);return void 0!==t.dateFrom&&a<t.dateFrom&&(n=!1),void 0!==t.dateTo&&a>t.dateTo&&(n=!1),void 0===t.taskTags||e.tags.includes(t.taskTags)||(n=!1),n}));return new Promise((t=>{t(n)}))}async update(t){const e=r({},t);return new Promise(((t,n)=>{let a=localStorage.getItem(this.namespace+e.id);if(null===a)n(new Error("Not found"));else{const t=JSON.parse(a);e.creationDateUTC=t.creationDateUTC,e.dueDateUTC=t.dueDateUTC,e.taskText||(e.taskText=t.taskText),e.status||(e.status=t.status),e.tags=t.tags}localStorage.setItem(this.namespace+e.id,JSON.stringify(e)),a=localStorage.getItem(this.namespace+e.id),t(JSON.parse(a))}))}async delete(t){await new Promise((e=>{localStorage.removeItem(this.namespace+t),e(null)}))}}var c=n(892),d=n.n(c),p=n(760),u=n.n(p),A=n(311),m=n.n(A),f=n(192),_=n.n(f),h=n(60),g=n.n(h),b=n(865),E=n.n(b),x=n(790),y={};function v(t){const e=t.trim(),n=document.createElement("template");return n.innerHTML=e,n.content.children}y.styleTagTransform=E(),y.setAttributes=_(),y.insert=m().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=g(),d()(x.Z,y),x.Z&&x.Z.locals&&x.Z.locals;var k=n(172),C={};C.styleTagTransform=E(),C.setAttributes=_(),C.insert=m().bind(null,"head"),C.domAPI=u(),C.insertStyleElement=g(),d()(k.Z,C),k.Z&&k.Z.locals&&k.Z.locals;var T=n(309),w={};w.styleTagTransform=E(),w.setAttributes=_(),w.insert=m().bind(null,"head"),w.domAPI=u(),w.insertStyleElement=g(),d()(T.Z,w),T.Z&&T.Z.locals&&T.Z.locals;var B=n(647),S={};S.styleTagTransform=E(),S.setAttributes=_(),S.insert=m().bind(null,"head"),S.domAPI=u(),S.insertStyleElement=g(),d()(B.Z,S),B.Z&&B.Z.locals&&B.Z.locals;var D=n(178),j={};function I(t,e,n){var a;return(e="symbol"==typeof(a=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?a:String(a))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}j.styleTagTransform=E(),j.setAttributes=_(),j.insert=m().bind(null,"head"),j.domAPI=u(),j.insertStyleElement=g(),d()(D.Z,j),D.Z&&D.Z.locals&&D.Z.locals;class P{constructor(t){I(this,"taskListEl",document.createElement("ul")),I(this,"items",[]);const{parent:e,onDelete:n,onEdit:a}=t;this.parent=e,this.items=[],this.onDelete=n,this.onEdit=a}renderTaskList(t){return void 0!==t&&(this.items=[...t]),null===this.parent.querySelector(".task-list")&&(this.taskListEl.className="task-list list",this.parent.append(this.taskListEl)),this.taskListEl.innerHTML="",0!==this.items.length?this.items.forEach((t=>function(t){const{parent:e,itemData:n,onDelete:a,onEdit:s}=t,i=v(`\n  <li class="list__item" data-id="${n.id}">\n      <div class="item__checkbox">\n        <input class="item__input-checkbox" type="checkbox">\n      </div>\n      <div class="input__wrapper">\n        <label class="item__title task">${n.taskText}</label>\n        <input class="item__input-text task" type="text" value="${n.taskText}">\n      </div>\n      <div class="item__dates">\n        <span class="item__creation-date">Created: ${new Date(n.creationDateUTC).toLocaleDateString()}</span>\n        <span class="item__due-date">Complete due: ${new Date(n.dueDateUTC).toLocaleDateString()}</span>\n      </div>\n      <div class="item__btn">\n        <button class="btn item__btn-edit" data-id="${n.id}">✏️</button>\n        <button class="btn item__btn-delete" data-id="${n.id}">🗑️</button>\n      </div>\n      <div class="item__task-tags tags">\n        ${function(t){let e="";return e=0===t.length?"":t.split(",").map((t=>`<span class="tags_tag">${t.trim()}</span>`)).join(" "),e}(n.tags)}\n      </div>\n  </li>`)[0];return n.status&&i.querySelector(".item__input-checkbox").setAttribute("checked","checked"),e.append(i),i.addEventListener("click",(t=>{var e;const r=null!==(e=n.id)&&void 0!==e?e:"";if(null!==t.target){const e=t.target;e.classList.contains("item__input-checkbox")?s({id:r,status:e.checked}).catch((t=>{console.error(t)})):e.classList.contains("item__btn-edit")?(i.classList.contains("edit-mode")&&function(t,e,n){const a=e.querySelector(".item__input-text");e.querySelector(".item__title").textContent=a.value,n({id:t,taskText:a.value}).catch((t=>{console.error(t)}))}(r,i,s),i.classList.toggle("edit-mode")):e.classList.contains("item__btn-delete")&&a(r).then((()=>{i.remove()})).catch(console.error)}})),i}({parent:this.taskListEl,itemData:t,onDelete:this.onDeleteProxy.bind(this),onEdit:this.onEdit}))):this.taskListEl.innerHTML="<li class='empty-list'>No tasks</li>",this.taskListEl}onDeleteProxy(t){return this.renderTaskList(this.items.filter((e=>e.id!==t))),this.onDelete(t)}additemToList(t){this.items.push(t),this.renderTaskList()}}function L(t){return null!=t&&""!==t}class O{constructor(t,e=new l){var n,a,s,i;n=this,s={taskAddForm:null,taskListEl:null,filterForm:null},(a="symbol"==typeof(i=function(t,e){if("object"!=typeof t||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var a=n.call(t,"string");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(a="Elements"))?i:String(i))in n?Object.defineProperty(n,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):n[a]=s,this.root=t,this.store=e,this.calendar=v('<div class="calendar"></div>')[0],this.activeDate=new Date,this.taskList=new P({parent:this.calendar,onDelete:this.delete.bind(this),onEdit:this.update.bind(this)})}init(){this.root.append(this.calendar),this.Elements.taskAddForm=function(t,e){const n=document.createElement("form");return n.className="task-add",n.id="task-add-form",n.innerHTML='   <fieldset class="task-add__fieldset">\n    <legend>Add task</legend>\n    <div class="task-add__group">\n      <label class="task-add__label">Task:</label>\n      <input type="text" name="taskText" class="task-add__input-text" placeholder="Enter task..." required>\n    </div>\n    <div class="task-add__group">\n      <label class="task-add__label">Due date:</label>\n      <input type="date" name="taskDate" class="task-add__input-date" required>\n    </div>\n    <div class="task-add__group">\n      <label class="task-add__label">Tags:</label>\n      <input type="text" name="taskTags" class="task-add__input-tags" placeholder="Enter comma separated tags">\n    </div>\n    <div class="task-add__group">\n      <button type="submit" class="task-add__btn-add">Add</button>\n    </div>\n  </fieldset>\n  ',t.append(n),n.addEventListener("submit",(t=>{if(t.preventDefault(),n.checkValidity()){const t=n.elements.namedItem("taskText").value,a=n.elements.namedItem("taskDate").value,s=n.elements.namedItem("taskTags").value;e(t,a,s),n.reset()}})),n}(this.calendar,this.onAddTask.bind(this)),this.Elements.filterForm=function(t,e){const n=document.createElement("form");return n.className="filter-controls filter",n.id="filter-controls",n.innerHTML='     <fieldset class="filter__fieldset">\n      <legend>Filter</legend>\n      <div class="filter__group">\n        <label class="filter__label">From date:</label>\n        <input class="filter__date-from" name="filterDateFrom" type="date">\n      </div>\n\n      <div class="filter__group">\n      <label class="filter__label">To date:</label>\n      <input class="filter__date-to" name="filterDateTo" type="date">\n    </div>\n\n      <div class="filter__group">\n        <label class="filter__label">By text content:</label>\n        <input class="filter__text" name="filterText" type="text" placeholder="Search">\n      </div>\n\n      <div class="filter__group">\n        <label class="filter__label">By status:</label>\n        <select class="filter__status" name="filterStatus">\n          <option value="">All</option>\n          <option value="0">Todo</option>\n          <option value="1">Done</option>\n        </select>\n      </div>\n\n      <div class="filter__group">\n        <label class="filter__label">By tag:</label>\n        <input class="filter__tags" name="filterTags" type="text" placeholder="Tags">\n      </div>\n\n      <div class="filter__group filter__group-btn">\n        <button type="submit" class="filter__btn-filter">Filter</button>\n        <input type="button" class="filter__btn-clear" value="Clear">\n      </div>\n    </fieldset>\n  ',t.append(n),n.querySelector(".filter__btn-clear").addEventListener("click",(()=>{n.reset()})),n.addEventListener("submit",(t=>{t.preventDefault();const a=n.elements.namedItem("filterText").value,s=n.elements.namedItem("filterDateFrom").value;let i=n.elements.namedItem("filterDateTo").value;const r=n.elements.namedItem("filterStatus").value;new Date(s)>new Date(i)&&(i=s,n.querySelector(".filter__date-to").value=i);const o=n.elements.namedItem("filterTags").value;e({taskText:a,taskDateFrom:s,taskDateTo:i,taskStatus:r,taskTags:o})})),n}(this.calendar,this.onFilter.bind(this)),this.read({}).then((t=>{this.Elements.taskListEl=this.taskList.renderTaskList(t)})).catch(console.error)}onAddTask(t,e,n){const a={creationDateUTC:(new Date).toUTCString(),dueDateUTC:new Date(e).toUTCString(),taskText:t,tags:n,status:!1};this.create(a).then((t=>{void 0!==t&&null!==this.Elements.taskListEl&&(a.id=t,this.taskList.additemToList(a))})).catch(console.error)}onFilter(t){const e={};L(t.taskText)&&(e.taskText=t.taskText),L(t.taskDateFrom)&&(e.dateFrom=new Date(t.taskDateFrom)),L(t.taskDateTo)&&(e.dateTo=new Date(t.taskDateTo)),L(t.taskStatus)&&(e.status=Boolean(Number(t.taskStatus))),L(t.taskTags)&&(e.taskTags=t.taskTags),this.read(e).then((t=>{null!==this.Elements.taskListEl&&this.taskList.renderTaskList(t)})).catch(console.error)}async create(t){return await this.store.create(t)}async read(t){return await this.store.read(t)}async update(t){return await this.store.update(t)}async delete(t){await this.store.delete(t)}}const $=v('<div id="root" style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;"></div>')[0];document.body.append($),new O($,new l("user")).init(),new O($,new class{constructor(n=e){a(this,"appPrefix",t),a(this,"user",{}),this.userPrefix=n,this.authenticate()}async authenticate(){const t={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:this.userPrefix,password:"123456",returnSecureToken:!0})},e=await fetch("https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBTsQ82-UIICuUNrkAV9uuhiQjOpyK1iOI",t),n=await e.json();this.user=n}async create(t){await this.authenticate();const e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},n=await fetch(`https://${s}.firebaseio.com/${this.appPrefix}/${this.user.localId}.json?auth=${this.user.idToken}`,e);return(await n.json()).name}async read(t){await this.authenticate();const e=await fetch(`https://${s}.firebaseio.com/${this.appPrefix}/${this.user.localId}.json?auth=${this.user.idToken}`,{method:"GET"}),n=await e.json();return Object.entries(n).reduce(((e,[n,a])=>{const s=a;s.id=n;let i=!0;void 0===t.taskText||s.taskText.includes(t.taskText)||(i=!1),void 0!==t.status&&t.status!==s.status&&(i=!1);const r=new Date(s.dueDateUTC);return void 0!==t.dateFrom&&r<t.dateFrom&&(i=!1),void 0!==t.dateTo&&r>t.dateTo&&(i=!1),void 0===t.taskTags||s.tags.includes(t.taskTags)||(i=!1),i&&e.push(s),e}),[]).sort(((t,e)=>t.creationDateUTC<e.creationDateUTC?-1:t.creationDateUTC>e.creationDateUTC?1:0))}async update(t){if(void 0===t.id)return;await this.authenticate();const e={method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},n=await fetch(`https://${s}.firebaseio.com/${this.appPrefix}/${this.user.localId}/${t.id}.json?auth=${this.user.idToken}`,e);return await n.json()}async delete(t){await this.authenticate(),await fetch(`https://${s}.firebaseio.com/${this.appPrefix}/${this.user.localId}/${t}.json?auth=${this.user.idToken}`,{method:"DELETE"})}}).init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,